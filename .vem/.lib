#!/bin/bash

# vem's Functions and Variables

# Vars
__cwd="$(pwd)"
prgroot="$HOME/.vem"

# Funcs
verbose() {
  [[ $VERBOSE ]] && echo -e '\e[0;1;35m[VERBOSE]\e[0;0;0m '"$1"
}

# Set virtual env
__setve() {
  local ve="$1"
  verbose "$ve"
  if [[ "$ve" == "" ]]; then
    echo "Must provide a name for the environment!" >&2
    return
  elif [[ "$ve" == "listall" ]]; then
    echo "Current Python Environments:"; ls -A1 "$prgroot/py" | cut -d '/' -f1
    echo ""
    echo "Current Node Environments:"; ls -A1 "$prgroot/js" | cut -d '/' -f1
    return
  fi

  if [[ "$__cwvem" =~ "py" ]]; then
    if [[ -n "$__path" && -e "$__cwvem/${ve}" ]]; then
      echo "$__cwvem/${ve}"
      return
    fi
    [[ "$ve" =~ ^(list|envs)$ ]] && ( echo "Current Python Environments:"; ls -A1 $__cwvem | cut -d '/' -f1 ) && return

    if [ -e "$__cwvem/$ve/Scripts/activate" -o -e "$__cwvem/$ve/bin/activate" ]; then
      # Activate the environment
      verbose "Activating virtual environment $ve..."
      . "$__cwvem/$ve/Scripts/activate" 2>/dev/null && verbose "Environment activated!" || . "$__cwvem/$ve/bin/activate" && verbose "Environment activated!" || echo "Failed to create environment!" >&2
    else
      verbose "Making virtual environment $ve..."
      python -m venv "$__cwvem/$ve" && verbose "Complete! Activating..." && \
      . "$__cwvem/$ve/Scripts/activate" 2>/dev/null && verbose "Environment activated!" || . "$__cwvem/$ve/bin/activate" && verbose "Environment activated!" || echo "Failed to create environment!" >&2
    fi
  elif [[ "$__cwvem" =~ "js" ]]; then
    if [[ -n "$__path" && -e "$__cwvem/$ve" ]]; then
      echo "$__cwvem/$ve"
      return
    fi
    [[ "$ve" =~ ^(list|envs)$ ]] && ( echo "Current Node Environments:"; ls -A1 $__cwvem | cut -d '/' -f1 ) && return

    if [ -e "$__cwvem/$ve/activate-ve" ]; then
      NVENV="$ve"
      # Activate the environment
      verbose "Activating virtual environment $ve..."
      . "$__cwvem/$ve/activate-ve"
      verbose "Environment activated! To install new packages, you must be in this directory! Path stays alive until terminal restart!"
    else
      NVENV="$ve"
      verbose "Making virtual environment $ve..."
      mkdir "$__cwvem/$ve"
      echo -e 'OLD_PS1="$PS1"; PS1="($NVENV) $PS1"; NODE_PATH=~/.vem/js/'"$ve\n"' deactivate() {'"\n"'  PS1="$OLD_PS1"'"\n"'  unset OLD_PS1'"\n"'}' > "$__cwvem/$ve/activate-ve"
      echo -e "[ \"\$1\" == \"\" ] && echo \"Must provide export location!\" || cp $__cwvem/$ve/package.json \"\$1\"" > "$__cwvem/$ve/export-ve"
      cd "$__cwvem/$ve"
      npm init -y
      verbose "Complete! Activating..."
      . "$__cwvem/$ve/activate-ve"
      verbose "Environment activated! To install new packages, you must be in this directory! Path stays alive until terminal restart!"
    fi
  else
    echo "Failed to find environment '$ve'!" >&2 # Generally only get here if not found
  fi
}

# Remove venv
__delve() {
  local ve="$1"
  if [[ -e "$__cwvem/$ve" ]]; then
    /bin/rm -r "$__cwvem/$ve"
    echo "Successfully removed virtual environment $ve!"
  else
    echo "Failed to remove virtual environment $ve!" >&2
  fi
}

# Parse args
__args() {
  for arg in "$@"; do
    case "$arg" in
      -p | --python | py | python )
        __cwvem="$HOME/.vem/py"
        ;;
      -j | --node | js | javascript | node )
        __cwvem="$HOME/.vem/js"
        ;;
      -h | --help | help )
        cat "$HOME/.vem/help"
        ;;
      -v | --version | version )
        cat "$HOME/.vem/version"
        ;;
      -d | --delete | del | delete )
        __del=true
        ;;
      -V | --verbose | verbose )
        VERBOSE=true
        ;;
      -P | --path | path )
        __path=true
        ;;
      * )
        [[ -n "$__del" ]] && __delve "$arg" || __setve "$arg"
        ;;
    esac
  done
}
